// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockAndBuyTestApp.Infrastructure.Persistance;

#nullable disable

namespace StockAndBuyTestApp.Infrastructure.Migrations
{
    [DbContext(typeof(StockAndBuyDbContext))]
    [Migration("20240104013932_BundleToProductTable")]
    partial class BundleToProductTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Bundle.Bundle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Bundle.Entites.BundleToBundleRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChildBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentBundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityNeeded")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChildBundleId");

                    b.HasIndex("ParentBundleId");

                    b.ToTable("BundleToBundleRelationships", (string)null);
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Common.Entities.BundleToProductRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BundleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantityNeeded")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BundleId");

                    b.HasIndex("ProductId");

                    b.ToTable("BundleToProductRelationship", (string)null);
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Stock.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Bundle.Bundle", b =>
                {
                    b.OwnsMany("StockAndBuyTestApp.Domain.Bundle.ValueObjects.BundleToBundleRelationshipId", "BundleItemsIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("BundleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ChildBundleId");

                            b1.HasKey("Id");

                            b1.HasIndex("BundleId");

                            b1.ToTable("BundleToBundleRelationshipIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BundleId");
                        });

                    b.OwnsMany("StockAndBuyTestApp.Domain.Common.ValueObjects.BundleToProductRelationshipId", "ProductItemsIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("BundleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("ChildProductId");

                            b1.HasKey("Id");

                            b1.HasIndex("BundleId");

                            b1.ToTable("BundleToProductRelationshipIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BundleId");
                        });

                    b.Navigation("BundleItemsIds");

                    b.Navigation("ProductItemsIds");
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Bundle.Entites.BundleToBundleRelationship", b =>
                {
                    b.HasOne("StockAndBuyTestApp.Domain.Bundle.Bundle", null)
                        .WithMany()
                        .HasForeignKey("ChildBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BundleToBundleRelationship_ChildBundle");

                    b.HasOne("StockAndBuyTestApp.Domain.Bundle.Bundle", null)
                        .WithMany()
                        .HasForeignKey("ParentBundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BundleToBundleRelationship_ParentBundle");
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Common.Entities.BundleToProductRelationship", b =>
                {
                    b.HasOne("StockAndBuyTestApp.Domain.Bundle.Bundle", null)
                        .WithMany()
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StockAndBuyTestApp.Domain.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("StockAndBuyTestApp.Domain.Stock.Stock", b =>
                {
                    b.HasOne("StockAndBuyTestApp.Domain.Product.Product", null)
                        .WithOne()
                        .HasForeignKey("StockAndBuyTestApp.Domain.Stock.Stock", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
